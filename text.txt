.sidebar {
  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.03);
  backdrop-filter: blur(6px);
  border-radius: 0.75rem;
  background: linear-gradient(135deg, hsla(0, 0%, 100%, 0.85), hsla(225, 100%, 97%, 0.85));
  border: 1px solid rgba(0, 86, 179, 0.05);
}

.sidebar-toggle {
  border: 1px solid var(--color-button-primary-bg);
  border-radius: 0.5rem;
  padding: 0.25rem 0.5rem;
  background: transparent;
  color: var(--color-text-primary);
  cursor: pointer;
  transition: background-color 0.3s ease;
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

.sidebar-toggle:hover {
  background-color: var(--color-button-primary-bg);
}

.sidebar-toggle:focus-visible {
  outline: none;
  background-color: var(--color-button-primary-bg);
  box-shadow: 0 0 0 3px rgba(30, 144, 255, 0.5);
}

.sidebar-toggle:active {
  background-color: var(--color-button-primary-active-bg);
}

html[data-theme="dark"] .sidebar {
  background: linear-gradient(135deg, hsla(223, 57%, 19%, 0.85), hsla(222, 83%, 11%, 0.85));
  border-color: var(--color-border-primary);
}



.nav-container {
  padding: 1rem;
  height: 100vh;
  display: flex;
  flex-direction: column;
  overflow-y: auto;
}

.nav-container.closed ul {
  /* optional: you can add styles for closed state container */
}

.nav-link {
  display: flex;
  align-items: center;
  padding: 0.5rem 1rem;
  border-radius: 0.5rem;
  color: var(--color-text-primary);
  cursor: pointer;
  text-decoration: none;
  transition: background-color 0.3s ease, color 0.3s ease;
}

.nav-link:hover {
  background-color: var(--color-card-tag-bg);
  color: var(--color-card-tag-text);
}

.nav-link.active {
  background-color: var(--color-button-primary-bg);
  color: var(--color-text-on-primary);
  font-weight: 700;
  box-shadow: 0 0 8px var(--color-button-primary-bg);
}

.nav-icon {
  flex-shrink: 0;
}

.nav-text {
  display: inline-block;
  overflow: hidden;
  white-space: nowrap;
  max-width: 0;
  opacity: 0;
  margin-left: 0;
  transition: max-width 0.3s ease, opacity 0.3s ease, margin-left 0.3s ease;
}

.nav-text.open {
  max-width: 500px; /* large enough */
  opacity: 1;
  margin-left: 0.5rem;
}

.user-badge {
  margin: 1rem 0;
  padding: 0.5rem;
  text-align: center;
  font-weight: 700;
  font-size: 1.25rem;
  background-color: var(--color-background-tertiary);
  border-radius: 0.5rem;
  color: var(--color-text-primary);
  user-select: none;
}

.logout-link,
.login-link {
  display: flex;
  align-items: center;
  padding: 0.5rem 1rem;
  border-radius: 0.5rem;
  color: var(--color-text-primary);
  cursor: pointer;
  text-decoration: none;
  transition: background-color 0.3s ease, color 0.3s ease;
}

.logout-link:hover,
.login-link:hover {
  background-color: var(--color-card-tag-bg);
  color: var(--color-card-tag-text);
}
































'use client';

import { useEffect, useState } from 'react';
import {  Menu, X } from 'lucide-react';
import NavLinks from './navlinks';
import { Companyname, Companyshortname } from '@/globalvar/companydetails';

export default function Sidebar() {
  const [isOpen, setIsOpen] = useState(false);
  const [aiAgent, setAiAgent] = useState(null);
  const [user, setUser] = useState(null);
  const [token,setToken] = useState()


  const loadAiAgent = () => {
    const storedAgent = localStorage.getItem('CurrentAiAgent');
    if (storedAgent) {
      try {
        const parsed = JSON.parse(storedAgent);
        setAiAgent(parsed.model);
      } catch {
        setAiAgent(null);
      }
    } else {
      setAiAgent(null);
    }
  };

  
  useEffect(() => {
    setUser(localStorage.getItem("user"))
    setToken(localStorage.getItem("token"))
    loadAiAgent();
  }, []);

  return (
    <aside
      className={`${
        isOpen ? 'lg:w-72' : 'lg:w-20'
      } flex-shrink-0 sidebar transition-all duration-300 ease-in-out flex flex-col`}
    >
      <div
        className={`p-3 border-b flex items-center border-[color:var(--color-button-bg)] ${
          isOpen ? 'lg:flex-row lg:justify-between' : 'lg:flex-col lg:space-y-2'
        }`}
      >
        <button
          onClick={() => setIsOpen(!isOpen)}
          className="sidebar-toggle"
          aria-label={`${isOpen ? 'Collapse' : 'Expand'} sidebar`}
        >
          {isOpen ? <X size={24} /> : <Menu size={24} />}
        </button>

        <div className="lg:hidden flex items-center font-semibold text-3xl ml-3 absolute right-1/3">
          {Companyname}
        </div>

        <div
          className={`hidden lg:flex items-center transition-all duration-300 overflow-hidden whitespace-nowrap
            font-semibold text-3xl ${isOpen ? 'max-w-full opacity-100 mr-2' : 'max-w-0 opacity-0'}`}
          aria-hidden={!isOpen}
        >
          {Companyname}
        </div>

        <div
          className={`hidden lg:flex flex-col items-center absolute mt-3 top-1/12 transition-opacity duration-300 ${
            isOpen ? 'opacity-0 pointer-events-none' : 'opacity-100'
          }`}
          aria-hidden={isOpen}
        >
          <span className="text-xl font-bold tracking-widest select-none">
            {Companyshortname}
          </span>
        </div>
      </div>

      <NavLinks isOpen={isOpen}  user={user} logoutfn={()=>{}} token={token}/>
      
    </aside>
  );
}













































"use client"
import { usePathname } from 'next/navigation'
import { HelpCircleIcon, Home, LetterText, Pin, Settings, ZoomIn, Contact, LogIn, LogOut } from 'lucide-react';
import Link from 'next/link';

const logout = () => {
  localStorage.clear()
  window.location.href = '/'
}

const links = [
  { name: 'Home', href: '/', Icon: Home },
  { name: 'My Resume', href: '/dashboard/myresumes', Icon: LetterText },
  { name: 'Profile', href: '/dashboard/profile', Icon: Contact },
  { name: 'Job Tracker', href: '/dashboard/jobtracker', Icon: Pin },
  { name: 'Job Finder', href: '/dashboard/jobfinder', Icon: ZoomIn },
  { name: 'Contact', href: '/contact', Icon: HelpCircleIcon },
];

export default function NavLinks({ isOpen, user, logoutfn, token }) {
  const pathname = usePathname();

  return (
    <nav className={`p-4 space-y-2 h-screen flex flex-col ${isOpen ? 'block shadow-modal' : 'hidden lg:flex'}`}>
      <ul>
        {links.map(({ href, name, Icon }) => {
          const isActive = pathname === href || (href !== '/' && pathname?.startsWith(href));
          return (
            <li key={name}>
              <Link
                href={href}
                className={`my-2 flex items-center px-4 py-2 rounded-md hover:bg-[color:var(--color-card-tag-bg)] hover:text-[color:var(--color-card-tag-text)] ${
                  isActive ? 'bg-[color:var(--color-card-tag-bg)] text-[color:var(--color-card-tag-text)] font-semibold' : ''
                }`}
              >
                <Icon size={20} className="flex-shrink-0" />
                <span className={`${isOpen ? 'block' : 'hidden'} ml-2 lg:${isOpen ? 'block' : 'hidden'}`}>
                  {name}
                </span>
              </Link>
            </li>
          )
        })}

        {user && (
          <>
            <div className="p-2 text-center text-2xl capitalize font-bold bg-[color:var(--color-button-primary-bg)] rounded-lg ">
              {isOpen ?
                <div>{JSON.parse(user)?.name}</div>
                :
                <div>{JSON.parse(user)?.name?.slice(0, 1)}</div>
              }
            </div>
          </>
        )}
        <li className='py-3 px-4 hover:bg-[color:var(--color-card-tag-bg)] hover:text-[color:var(--color-card-tag-text)] rounded-md'>
          {user ? (
            <div onClick={logout} className="flex items-center cursor-pointer select-none">
              {isOpen ?
                <div className='flex gap-2.5'><LogOut size={20} className='flex shrink-0' />logout</div>
                :
                <LogOut size={20} className='shrink-0' />
              }
            </div>
          ) : (
            <Link href={'/login'} className="flex items-center">
              <LogIn size={20} className="flex-shrink-0 " />
              <span className={`${isOpen ? 'block' : 'hidden'} ml-2 lg:${isOpen ? 'block' : 'hidden'}`}>
                login
              </span>
            </Link>
          )}
        </li>

      </ul>
    </nav>
  );
}
